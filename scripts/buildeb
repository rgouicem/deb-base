#!/bin/bash
#How To Use This Script
#----------------------

#The purpose of this script is to create Debian packages. As you may know
#there are differents types of packages. This script allows you to create two
#differents type of packages. The first one is the binary package which contains
#binary files. The other one is the library package. When you want to create 
#a library package, two packages are actually created. Here is a quick
#description of those : 
#1. `<package_name>_<version>.deb` : This is the package containing
#the libraries.
#2. `<package_name>-dev_<version>.deb` : This package will contain the
#header files.

#In order for this script to work correctly, some scripts and files are needed. 
#Thoses files can be found in the same repository where you've found this
#one. Here is a list of them :
#1. build_config.yml : This file contains all the informations this script
#need to build the Debian packages you want. <span class='gras'>You must
#read it, and fill it with correct informations.</span>
#2. config_parser.pl : This perl script parses the configuration file (see 
#above), and produces an output that look something like "export NAME=VALUE;".
#If you've not obtained this files via the Debian Package, then this file must
#be in the same directory where you will launch the script.
#3. correct_lintian.pl : Perl script that correct some of the mistakes that
#lintian (command that check the conformity of packages) detects. Although this
#script is not necessary to produce a package, it's highly recommended
#to have it, in order to build a package that complies with the Debian Policy.
#If you've not obtained this files via the Debian Package, then this file must
#be in the same directory where you will launch the script.
#4. Your project needs a makefile if you want to build a binary package. Debian
#tools need one to create binaries, in order to include them into the package.

#However, if you've obtained this script via the Debian package, then you should
#know that the configuration file you need to fill is located in `/usr/share`.
#You should copy it where your source code is. This is not an obligation though,
#since you can specify where this file is located when you launch this script.
#If you want to know more about the options you can specify in the command line
#of this script, please read the <a href='#opts'>`Parsing command line options`
#</a> paragraph

#How this script works
#---------------------

#Here are the main steps of the script :
#1. <a href='#opts'>Parsing command line options</a>
#2. <a href='#conf'>Reading the configuration file</a>
#3. <a href='#makefile'>Looking for the Makefile</a>
#4. <a href='#log'>Creating log</a>
#5. <a href='#tarball'>Creating Tarballs</a>
#6. <a href='#copyright'>The copyright file</a>
#7. <a href='#lib'>Building the packages</a>
#  1. <a href='#libdeb'>Creation of the Debian files</a>
#  2. <a href='#libmod'>Modification of the Debian files</a>
#  3. <a href='#libsource'>Creation of the source package</a>
#  4. <a href='#libbuild'> Building the package</a>

#<a id='opts'>Parsing command line options.</a>
#----------------------------------------------

#In this part of the script, we are parsing the arguments given to the script.
#Here is the list of the options you can use when you call this script : 
#- `-h` : If you want an help to be displayed.
#- `-g` : If you want to generate a configuration file template.
#- `-l` : Use that if you don't want the script to remove temporary files. 
#Those files includes : 
#  - The tarballs (i.e. the archives that contains your source code)
#  - The debian directory, that is created during the build of the package. It
#contains the configuration files used by the program which will create the 
#package
#- `-c <configuration_file>` : This option allows you to indicate the path
#leading to your configuration file. The path must be relative to where you
#launch this script. This is not required. If you don't use this option,
#then we will assume that the configuration file is in the current directory
#(i.e. the directory where you launch this script.). We will also assume that 
#its name is `build_config.yml`. If it's not, then you should use this option.
#- `-d <makefile_directory>` : This option allows you to indicate in which
#directory the makefile of your project is located. You can omit this option, if
#the makefile is in the directory where you'll launch this script.

leaveunclean=0
while getopts "c:d:lgh" opt; do
    case $opt in
	h)
	    echo "Usage: `basename $0` [OPTIONS]";
	    echo "If you've not obtained this script via the debian package \
then the files" 
	    echo "config_parser.pl and correct_lintian.pl must be in the same \
directory where"
	    echo "you'll execute this script."
	    echo "Make sure build_config.yml is correctly filled."
	    echo "Options:"
	    env echo -e "  -l\t\t\tDon't clean files created during the build \
of the\n\t\t\tpackages."
	    env echo -e "  -h\t\t\tPrint this help."
	    env echo -e "  -c <config_file>\tAllows you to indicate where your\
 configuration file"
	    env echo -e "\t\t\tis located. If you omit this\
 option we will assume"
	    env echo -e "\t\t\tthat it's located in the \
directory where you've"
	    env echo -e "\t\t\tlauched this script and \
its name is build_config.yml"
	    env echo -e "  -d <makefile_dir>\tPath leading to the directory \
where your makefile is."
	    env echo -e "\t\t\tIf you omit this option, then we \
will assume that the"
	    env echo -e "\t\t\tmakefile is located in the \
the directory where you"
	    env echo -e "\t\t\texecute this script."
	    env echo -e "  -g\t\t\tGenerate a configuration file template."
	    exit 0;;
	l)
	    leaveunclean=1;;
	c) 
	    CONFIGFILE="$OPTARG";;
	d)
	    MAKEFILEDIR="$OPTARG";;
	g)
	    if [ -f "/usr/share/buildeb-all/build_config.yml" ]; then
		cp /usr/share/buildeb-all/build_config.yml .
		echo "build_config.yml successfully generated !"
		exit 0;
	    else
		echo "Couldn't find build_config.yml in /usr/share/buildeb-all."
		exit 1;
	    fi
	    ;;
	\?)
	    echo "Usage: `basename $0` [OPTIONS]";
	    exit 1;;
    esac
done
shift $(( $OPTIND - 1 ))

#<a id='conf'>Reading configuration file.</a>
#--------------------------------------------

#In order for this script to run correctly, you need to complete the file named
#'_build\_config.yml_'. This file defines a certain number of variable (like the
#name of the packages, the version of the program, and so on ...) that this
#script will then use to build the packages the user want. <span class='gras'>
#Unless you've used the -c option, the configuration file must be located in 
#the same directory where this script will be launched. </span>
 
#So, firstly, we check if the user has used the -c option. If that is not the 
#case (i.e. the variable CONFIGFILE is empty), then we will consider that the
#name of the configuration file is `build_config.yml`, and that it is located
#in the directory where the script has been launched.

if [ -z "$CONFIGFILE" ]
then
    CONFIGFILE="build_config.yml";
fi

#Now, we're checking if CONFIGFILE leads to an existing file. If it's not, then
#we stop the script, because we need the informations in this file in order
#to build the packages

if [ ! -f "$CONFIGFILE" ] 
then
    echo "build_config.yml is missing" >&2
    exit 1;
else
    echo "Configuration file `basename $CONFIGFILE` found !"
fi

#Now, we're looking for the script config_parser.pl, that will read the 
#configuration file and produce an output like : "export NAME=VALUE", which can
#be evaluated by the shell interpreter. This file can be located in two places.
#It can either be in the current directory or in /usr/bin (It can be the case if
#the user has installed the package contening this script). 

if [ ! -f "config_parser.pl" ] && \
    [ ! -f "/usr/share/buildeb-all/config_parser" ] 
then
    echo "config_parser.pl is missing" >&2
    exit 2;
else
    echo "config_parser.pl found !"
    if [ -f "config_parser.pl" ]
    then
	PARSER="./config_parser.pl";
    else
	PARSER="/usr/share/buildeb-all/config_parser";
    fi
fi

#Now, we're checking if the user has used the option -d, in order to indicate
#the path to the directory that contains the makefile. If he hasn't, then we
#we use the current directory as the makefile directory. If the user has 
#specified an inexistant directory, then we exit the script with an error

if [ -z "$MAKEFILEDIR" ]
then
    MAKEFILEDIR=`pwd`
else
    if [ ! -d "$MAKEFILEDIR" ]
    then 
	echo "$MAKEFILEDIR is not a directory" >&2
	exit 5;
    fi
fi

#Then, we parse the configuration file. This is done by the perl script 
#`config_parser.pl`. This script must be in the same directory as this
#script if you've not installed the debian package containing it. This
#script needs two arguments : the path leading to the configuration file, and
#the path leading to the directory where the makefile is located. 
#`config_parser.pl` reads the configuration file, and produces an
#output that looks like that : `export NAME=VALUE;`. This script checks if the
#user has made mistakes when he was filling it (for example, it checks if 
#the field VERSION is filled). So, we have to check if the script has
#terminated successfully before continuing. If it hasn't, we print an error
#message and quit the script immediatly.

vars=`$PARSER $CONFIGFILE $MAKEFILEDIR`;
res=$?;
case $res in
    "0") eval "$vars"; echo "build_config.yml successfully scanned !";;
    "1") exit 4;;
    "2") echo "Error in build_config.yml : PACKAGETYPE is empty" >&2 ; exit 4;;
    "3") echo "Error in build_config.yml : Unknown type of package">&2 ;exit 4;;
    "4") echo "Error in build_config.yml : Version number missing (VERSION is \
empty)" >&2 ; exit 4;;
    "5") echo "Error in build_config.yml : BINPACKAGENAME is empty">&2 ;exit 4;;
    "6") echo "Error in build_config.yml : LIBPACKAGENAME is empty">&2 ;exit 4;;
    "7") echo "Error in build_config.yml : COPYRIGHT variable doesn't contain \
a path that lead to an existing file">&2 ;exit 4;;
    "8") echo "Error in build_config.yml : DEVS is empty (and it shouldn't \
because COPYRIGHT isn't a file)" >&2 ; exit 4;;
    "9") echo "Error in build_config.yml : BINARYNAMES is empty">&2; exit 4;;
    "10") echo "Error in build_config.yml : LIBNAMES and HEADERNAMES are \
empty">&2;exit 4;;
    "11") echo "Error in build_config.yml : INDPACKAGENAME is empty">&2;exit 4;;
    "12") echo "Error in build_config.yml : INDNAMES is empty">&2; exit 4;;
    *) echo "Unknown error">&2;exit 4;;
esac

#<a id='makefile'>Looking for the Makefile</a>
#---------------------------------------------

#Here, we are checking the presence of a Makefile.
#If there is no Makefile, the script quits immediatly.
#Debian tools need that in order to build your program.

CURR=`pwd`;
cd $MAKEFILEDIR;
MAKEFILEDIR=`pwd`;
if [ ! -f Makefile ] 
then
    echo "Makefile is missing" >&2
    exit 3;
else
    echo "Makefile found in $MAKEFILEDIR."
fi

#<a id='log'>Creating log</a>
#----------------------------

#We create a log file to keep track of what has been done and we redirect
#standard output to another log to keep the console clean and readable.

cd $MAKEFILEDIR/..
LOGDIR=`pwd`
cd $MAKEFILEDIR
LOGFILE=$LOGDIR/buildeb.log
FULLLOGFILE=$LOGDIR/buildeb_full.log

:> $LOGFILE
:> $FULLLOGFILE

env echo -e "This log was generated by buildeb while building a \n\
debian package from the sources in $MAKEFILEDIR.\n" | tee -a $LOGFILE \
 $FULLLOGFILE
timestamp=`date -R`
env echo -e "Timestamp :     $timestamp\n" | tee -a $LOGFILE $FULLLOGFILE

#<a id='beforebuild'>Running before build operations</a>
#-------------------------------------------------------

#We execute commands specified in the configuration file in `BEFOREBUILD` 
#before doing anything build-related.

cd $MAKEFILEDIR
IFS=';' read -a commands <<< "$BEFOREBUILD"
for cmd in "${commands[@]}"
do
    echo $cmd | tee -a $LOGFILE $FULLLOGFILE
    eval "$cmd"
done


#<a id='tarball'>Creating Tarballs</a>
#--------------------------------------

#We check if the user wants to build a library package by looking 
#at the PACKAGETYPE variable. If there is a "l" in this string, it means that 
#the user want to build a library package. To do so, we have to create an 
#adequately named tarball. In order to be adequatly named, a tarball must 
#have a name that matches the following pattern : 
#&lt;package\_name&gt;\_&lt;version&gt;.orig.tar.gz.

#<span class='gras'>N.B. :</span> package\_name must be the name of the 
#library package you want to build.

#In the same way, if there is a "s" in PACKAGETYPE, it means that we 
#have to create a binary package. We must also create a tarball that is named
#adequately (i.e. it must follow the previous pattern).

LIBPACK=false
BINPACK=false
INDPACK=false
for var in $PACKAGETYPE; do
    if [ $var = "l" ]
    then
	LIBPACK=true
	echo "Building library packages." | tee -a $LOGFILE $FULLLOGFILE
    fi
    if [ $var = "s" ]
    then
	BINPACK=true
	echo "Building binary package." | tee -a $LOGFILE $FULLLOGFILE
    fi
    if [ $var = "i" ]
    then
	INDPACK=true
	echo "Building architecture independant package." | tee -a \
$LOGFILE $FULLLOGFILE
    fi
done

if [ $LIBPACK == true ]
then
    TARBALL="$LIBPACKAGENAME""_$VERSION.orig.tar.gz"
    PACKNAME="$LIBPACKAGENAME""_$VERSION"
elif [ $BINPACK == true ]
then
    TARBALL="$BINPACKAGENAME""_$VERSION.orig.tar.gz"
    PACKNAME="$BINPACKAGENAME""_$VERSION"
elif [ $INDPACK == true ]
then
    TARBALL="$INDPACKAGENAME""_$VERSION.orig.tar.gz"
    PACKNAME="$INDPACKAGENAME""_$VERSION"
fi
echo "tar czf "../$TARBALL" ." >> $FULLLOGFILE
tar czf "../$TARBALL" . >> $FULLLOGFILE
echo "Tarball $TARBALL created." | tee -a $LOGFILE $FULLLOGFILE
    

#<a id='copyright'>The copyright file</a>
#----------------------------------------

#The Debian Policy tells us that there need to be a file named '_copyright_'
#in the debian directory. Although this is not mandatory, it's recommended to
#do so, if you want your package to be compliant with the Debian Policy. There's
#a variable concerning this in the configuration file.

#In this part of the script, we check if the variable COPYRIGHT is empty, a file
#the user wants to include or a predefined value.
 
if [ "$COPYRIGHT" = "gpl" ] || [ "$COPYRIGHT" = "gpl2" ] \
    || [ "$COPYRIGHT" = "gpl3" ] || [ "$COPYRIGHT" = "lgpl" ] \
    || [ "$COPYRIGHT" = "lgpl2" ] || [ "$COPYRIGHT" = "lgpl3" ] \
    || [ "$COPYRIGHT" = "artistic" ] || [ "$COPYRIGHT" = "apache" ] \
    || [ "$COPYRIGHT" = "bsd" ] || [ "$COPYRIGHT" = "mit" ]
then
    COPYRIGHTTYPE=predefined;
    echo "Using a predefined $COPYRIGHT copyright." | tee -a $LOGFILE \
	$FULLLOGFILE
elif [ -f "$COPYRIGHT" ]
then
    COPYRIGHTTYPE=file;
    echo "Using a file copyright located in $COPYRIGHT." | tee -a $LOGFILE \
	$FULLLOGFILE
else
    COPYRIGHTTYPE=empty;
    echo "Using an empty copyright file." | tee -a $LOGFILE $FULLLOGFILE
fi

#<a id='lib'>Building the packages</a>
#----------------------------------------------

#This is the part of the script where we're going to build the packages that the
#user want. 

#<a id='libdeb'>Creation of the Debian files</a>
#-----------------------------------------------

#In order to build packages, debuild (the utilitary that will create the 
#package) needs some files that must be put in a directory 
#named _debian_, in the directory that contains the makefile that allows us to
#build your program.

#The files that debuild needs can be created automatically by the command 
#dh_make. We call dh_make with those options :
#1. `-l` or `-s` or `-i` : It means that we want to create a certain type of
#package. Here is the meaning of each one of those options :
#  1. `-l` : It means we're going to create library packages (one containing
#libraries, and one containing headers). If it happens that the user wants
#to build library packages and a binary package, then we use that option
#because the files generated by that option need less modification than the ones
#generated by the `-s` option.
#  2. `-s` : This tells dh-make that we're going to build a binary package.
#  3. `-i` : This is the option we use for packages that don't depend on the
#architecture of your computer. You can put scripts, images, and a lot of things
#that don't depend on the architecture of your computer in this type package.
#2. -c : It tells dh_make we want a pre-filled copyright file (We use that if 
#the user has filled the field COPYRIGHT of the configuration file with one
#of the following value : `gpl`, `gpl2`, `gpl3`, `lgpl`, `lgpl2`, `lgpl3`, 
#`artistic`, `apache`, `bsd`, `mit`).
#3. -p : Forces the package name to be what is after that option. It's quite
#usefull because dh_make normally checks if the source code directory is named
#according to the following pattern : `<packagename>-<version>`. 
#This option allows you to name your directory whatever name you want.

echo "Creation of debian files" | tee -a $LOGFILE $FULLLOGFILE

#First we have to remove the debian directory, because if there is one,
#dh_make will not make any changes, and that's not what we want.

echo "rm -rf debian/" >> $FULLLOGFILE
rm -rf debian/

#We create a temporary file that only contains a blank line. We do that because
#dh_make waits an input from the user. We know that there's a -y option that
#tells dh_make not to ask for the user confirmation. However, that option is not
#available on every dh_make version, so we've made the choice to do it that way.

env echo -e -n "\n" > debtmpfile

#We use the -c option of dh_make if the user specified that the copyright file
#must be generated by dh_make. You shouldn't really do that because the
#copright files that are generated by dh_make needs to be filled with
#correct information

if [ "$COPYRIGHTTYPE" = "predefined" ]
then
copy="-c $COPYRIGHT"
fi
if [ $LIBPACK == true ]
then
    echo "dh_make -l $copy -p $PACKNAME" >> $FULLLOGFILE
    dh_make -l $copy -p $PACKNAME < debtmpfile >> $FULLLOGFILE
elif [ $BINPACK == true ]
then
    echo "dh_make -s $copy -p $PACKNAME" >> $FULLLOGFILE
    dh_make -s $copy -p $PACKNAME < debtmpfile >> $FULLLOGFILE
elif [ $INDPACK == true ]
then
    echo "dh_make -i $copy -p $PACKNAME" >> $FULLLOGFILE
    dh_make -i $copy -p $PACKNAME < debtmpfile >> $FULLLOGFILE
fi

#If the user has written a copyright file, we copy it in the debian directory

if [ "$COPYRIGHTTYPE" = "file" ] 
then
    echo "cp $COPYRIGHT debian/copyright" >> $FULLLOGFILE
    cp $COPYRIGHT debian/copyright
fi

#We then remove the temporary file we have created.

echo "rm -f debtmpfile" >> $FULLLOGFILE
rm -f debtmpfile

echo "Template files generated by dh_make." | tee -a $LOGFILE $FULLLOGFILE

#<a id='libmod'>Modification of the debian files</a>
#----------------------------------------------------

#dh\_make creates the debian directory, and all the files in it. Therefore, we
#must modify some of them, because some of them are not complete.

#First, we need to modify the changelog file, because if we don't, the name
#of the package will be something like : `<packagename>_<version>-1_<archi>.deb`
#. This is not what we want. We want something like :
#`<packagename>_<version>_<archi>.deb`.

#echo "perl -pi -e 's/\(((\d+\.?)+)-\d+\)/($1)/' debian/changelog" >>\
# $FULLLOGFILE
#perl -pi -e 's/\(((\d+\.?)+)-\d+\)/($1)/' debian/changelog
    
#Some of the files generated by dh_make are just examples of what you should 
#provide. This is not interesting to us, therefore we have to suppress them.

echo "rm -rf debian/*.EX debian/*.ex debian/README*" >> $FULLLOGFILE
rm -rf debian/*.EX debian/*.ex debian/README*

#We then have to rename the dirs files and the install files that have been
#created by dh\_make. .dirs files tells _debuild_ what are the directories
#that must created in the package(s). .install files tells the _debuild_ 
#command what files must be put in the package(s). You can create up to one
#.dirs file and one .install file for each package you want to build.
#If the user wants to build library packages, we need to rename those files 
#because the generated files are named according to these patterns :
#`<packagename>1.dirs` and `<packagename>1.install`. This is not 
#correct, because those files must be named after the package name. Thus, 
#we must rename them according to the following pattern : 
#`<packagename>.dirs` and `<packagename>.install`.

if [ $LIBPACK == true ]
then
    echo "mv debian/$LIBPACKAGENAME""1.dirs" debian/$LIBPACKAGENAME.dirs >> \
$FULLLOGFILE
    mv debian/"$LIBPACKAGENAME"1.dirs debian/"$LIBPACKAGENAME".dirs
    echo "mv debian/$LIBPACKAGENAME""1.install" debian/$LIBPACKAGENAME.install \
>> $FULLLOGFILE
    mv debian/"$LIBPACKAGENAME"1.install debian/"$LIBPACKAGENAME".install
fi

#If we're building library packages, we must modify the control file because
#in the control file, the name of the package is `<packagename>BROKEN`.
#This is not the package name we want, we must therefore change it to
#`<packagename>`.

if [ $LIBPACK == true ]
then
    echo "sed -i -r -e s/$LIBPACKAGENAME""BROKEN/$LIBPACKAGENAME/g \
 debian/control" >> $FULLLOGFILE
    sed -i -r -e s/"$LIBPACKAGENAME"BROKEN/"$LIBPACKAGENAME"/g debian/control
    echo "Library package renamed to $LIBPACKAGENAME." | tee -a $LOGFILE \
	$FULLLOGFILE
fi

#Then, we have to fill the .install and .dirs files with correct information.
#In order to do that, we use the variables LIBNAMES (which contains the
#libraries you want to include in the library package), HEADERNAMES (which 
#contains the name of the header files you want to include in the library 
#package), BINARYNAMES (which contains the names of the binaries you want 
#to include in the binary package) and INDNAMES (which contains the architecture
#independant files). If HEADERNAMES is empty, we remove the part
#of the control file that concern the package that will contains the header
#files. Therefore, that package will not be created.

if [ $LIBPACK == true ]
then

#Libraries will be put in `/usr/lib/LIBPACKAGENAME/` when the package is 
#installed
    
    echo "rm -f debian/$LIBPACKAGENAME.install" >> $FULLLOGFILE
    rm -f debian/$LIBPACKAGENAME.install
    for library in $LIBNAMES
    do
	echo "$library usr/lib/$LIBPACKAGENAME" >>debian/$LIBPACKAGENAME.install
    done;

    if [ ! -z "$LIBNAMES" ] 
    then
	echo "Added libraries that will be included in \
debian/$LIBPACKAGENAME.install : $LIBNAMES." | tee -a $LOGFILE $FULLLOGFILE
    fi


#Headers will be put in `/usr/include/LIBPACKAGENAME/` when the package is 
#installed.

    if [ ! -z "$HEADERNAMES" ]
    then
	rm -f debian/$LIBPACKAGENAME-dev.install;
	for header in $HEADERNAMES
	do
	    echo "$header usr/include/$LIBPACKAGENAME" >>\
debian/$LIBPACKAGENAME-dev.install
	done;

	echo "Added headers that will be included in \
debian/$LIBPACKAGENAME-dev.install : $HEADERNAMES." | tee -a $LOGFILE \
	    $FULLLOGFILE
    else
	perl -0777 -pi -e "s/Package: $LIBPACKAGENAME-dev.+?\n\n//s" \
	    debian/control
    fi
fi

#Binaries will be put in `/usr/bin/` when the package is installed

if [ $BINPACK == true ] 
then
    for binary in $BINARYNAMES
    do
	echo "$binary usr/bin" >> debian/$BINPACKAGENAME.install
    done;

    echo "Added binaries that will be included in \
debian/$BINPACKAGENAME.install : $BINARYNAMES." | tee -a $LOGFILE $FULLLOGFILE

    echo "usr/bin" >> debian/$BINPACKAGENAME.dirs
    echo "Added /usr/bin to debian/$BINPACKAGENAME.dirs." | tee -a $LOGFILE \
	$FULLLOGFILE
fi

#Architecture independant files will be put in `/usr/share/INDPACKAGENAME/ 
#when the package is installed.

if [ $INDPACK == true ]
then
    for indep in $INDNAMES
    do
	echo "$indep usr/share/$INDPACKAGENAME" >> \
	    debian/$INDPACKAGENAME.install
    done;
    echo "Added architecture independant files that will be included in \
debian/$INDPACKAGENAME.install : $INDNAMES." | tee -a $LOGFILE $FULLLOGFILE
    echo "usr/share" >> debian/$INDPACKAGENAME.dirs
    echo "Added /usr/share to debian/$INDPACKAGENAME.dirs." | tee -a $LOGFILE \
	$FULLLOGFILE
fi

#If the user want to build library packages and a binary package, we have to
#tell the tool that will create them that there's a binary package in addition
#of the two library packages. This is due to the `-l` option used when the user
#wants to build both type of packages. This option creates a control file that
#contains information for library packages only.

if [ $LIBPACK == true ]
then 
    if [ $BINPACK == true ]
    then	
	env echo -e -n "\n" >> debian/control
	echo "Package: $BINPACKAGENAME" >> debian/control
	echo "Architecture: any" >> debian/control
	echo 'Depends: ${shlibs:Depends}, ${misc:Depends}' >>debian/control
	echo 'Description: <insert up to 60 chars description>' >>debian/control
	echo ' <insert long description, indented with spaces>' >>debian/control

	echo "Added binary package description to debian/control file." \
	    | tee -a $LOGFILE $FULLLOGFILE
    fi
    if [ $INDPACK == true ]
    then
	env echo -e -n "\n" >> debian/control
	echo "Package: $INDPACKAGENAME" >> debian/control
	echo "Architecture: all" >> debian/control
	echo 'Depends: ${misc:Depends}' >> debian/control
	echo "Description: <insert up to 60 chars description>" \
>> debian/control
	echo " <insert long description, indented with spaces>" \
>> debian/control

	echo "Added arch-independant package description to debian/control \
file." | tee -a $LOGFILE $FULLLOGFILE
    fi
elif [ $BINPACK == true ] && [ $INDPACK == true ] 
then
    env echo -e -n "\n" >> debian/control
    echo "Package: $INDPACKAGENAME" >> debian/control
    echo "Architecture: all" >> debian/control
    echo 'Depends: ${misc:Depends}' >> debian/control
    echo "Description: <insert up to 60 chars description>" >> debian/control
    echo " <insert long description, indented with spaces>" >> debian/control

    echo "Added arch-independant package description to debian/control \
file." | tee -a $LOGFILE $FULLLOGFILE
fi

#Now, we have to add the dependencies of the packages, in the control file.

if [ ! -z "$BINRUNDEPENDS" ]
then
    echo "perl -0777 -pi -e 's/(Package: $BINPACKAGENAME.*?Depends:.+?)\n/$1, \
$BINRUNDEPENDS/s' debian/control" >> $FULLLOGFILE
    perl -0777 -pi -e 's/(Package: '"$BINPACKAGENAME"'.*?Depends:.+?)\n/$1, '"$BINRUNDEPENDS\n/s" debian/control 
    echo "Added binaries' runtime dependencies to debian/control :\
 $BINRUNDEPENDS." | tee -a $LOGFILE $FULLLOGFILE
fi

if [ ! -z "$LIBRUNDEPENDS" ]
then
    echo "perl -0777 -pi -e 's/(Package: $LIBPACKAGENAME.*?Depends:.+?)\n/$1, \
$LIBRUNDEPENDS/s' debian/control" >> $FULLLOGFILE
    perl -0777 -pi -e 's/(Package: '"$LIBPACKAGENAME"'.*?Depends:.+?)\n/$1, '"$LIBRUNDEPENDS\n/s" debian/control 
    echo "Added libraries' runtime dependencies to debian/control :\
 $LIBRUNDEPENDS." | tee -a $LOGFILE $FULLLOGFILE
fi

if [ ! -z "$INDRUNDEPENDS" ]
then
    echo "perl -0777 -pi -e 's/(Package: $INDPACKAGENAME.*?Depends:.+?)\n/$1, \
$INDRUNDEPENDS/s' debian/control" >> $FULLLOGFILE
    perl -0777 -pi -e 's/(Package: '"$INDPACKAGENAME"'.*?Depends:.+?)\n/$1, '"$INDRUNDEPENDS\n/s" debian/control 
    echo "Added arch-independant files' runtime dependencies to debian/control :\
$INDRUNDEPENDS." | tee -a $LOGFILE $FULLLOGFILE
fi

if [ ! -z "$BUILDDEPENDS" ]
then
    echo "perl -pi -e 's/(Build-Depends:.+)$/$1, $BUILDDEPENDS/' debian/control"\
>> $FULLLOGFILE
    perl -pi -e 's/(Build-Depends:.+)$/$1, '"$BUILDDEPENDS/" debian/control
    echo "Added build dependencies to debian/control : $BUILDDEPENDS." \
	| tee -a $LOGFILE $FULLLOGFILE
fi

#Then, if the user want to call the `configure` script of his project
#with special flags, we have to modify the _rules_ file in order to use them
#when _debuild_ will call it.

if [ -n "$CONFIGUREFLAGS" ]
then
    echo "override_dh_auto_configure:" >> debian/rules
    env echo -e "\tdh_auto_configure -- $CONFIGUREFLAGS\n" >> debian/rules
    echo "Added the following flags to configure execution : $CONFIGUREFLAGS." \
	| tee -a $LOGFILE $FULLLOGFILE
fi

#We give a list of the libraries we build to `debuild` so he can check links 
#between them and binaries (if any)

if [ ! -z "$LIBNAMES" ]
then
    libdir="-l"
    for lib in $LIBNAMES
    do
	l=`echo $lib | grep -E -o ".+/"`
	libdir="$libdir$l:"
    done
    libdir=`echo $libdir | perl -ne 'chomp;chop;print $_'`
    echo "override_dh_shlibdeps:" >> debian/rules
    env echo -e "\tdh_shlibdeps $libdir\n" >> debian/rules
    echo "Added the following libraries for dh_shlibdeps : $libdir." \
	| tee -a $LOGFILE $FULLLOGFILE
fi

#We tell `debuild` to have a verbose output so we can have a complete log

env echo -e "\nexport DH_VERBOSE=1\n" >> debian/rules

#We tell debuild not to use `dh_auto_install` because it makes errors when
#building multiple packages at the same time.

env echo -e "\noverride_dh_auto_install:" >> debian/rules
env echo -e "\t\n" >> debian/rules

#<a id='libsource'>Creation of the source package</a>
#----------------------------------------------------

#Now, we are building a source package that contains the source code 
#of your program. When debuild has created that package, it runs a program 
#called _lintian_, that checks if the package complies with the debian policy.
#The log of this run can be found in the file whose name matches the following
#pattern : &lt;packagename&gt;\_&lt;version&gt;\_source.build. Some of the
#errors detected by _lintian_ can be corrected automatically. This is why we've
#created a script called _correct\_lintian.pl_, that corrects some of thoses
#errors. 

echo "Building source package..." | tee -a $LOGFILE $FULLLOGFILE
echo "debuild -S -uc -us" >> $FULLLOGFILE
debuild -S -uc -us >> $FULLLOGFILE

if [ $? -ne 0 ]; then
    echo "Source package building failed." | tee -a $LOGFILE $FULLLOGFILE
    exit 6
fi
echo "Source package successfully built." | tee -a $LOGFILE $FULLLOGFILE
echo "Running correction to lintian errors..." | tee -a $LOGFILE \
    $FULLLOGFILE

if [ -f "$CURR/correct_lintian.pl" ]
then
    echo "$CURR/correct_lintian.pl $MAKEFILEDIR/../$PACKNAME""-1_source.build" >>\
 $FULLLOGFILE
    $CURR/correct_lintian.pl "$MAKEFILEDIR/../$PACKNAME""-1_source.build" >> \
$FULLLOGFILE
elif [ -f "/usr/share/buildeb-all/correct_lintian" ] 
then
    echo "/usr/share/buildeb-all/correct_lintian \
$MAKEFILEDIR/../$PACKNAME""-1_source.build" >> $FULLLOGFILE
    /usr/share/buildeb-all/correct_lintian \
	"$MAKEFILEDIR/../$PACKNAME""-1_source.build" >> $FULLLOGFILE
fi
echo "Lintian errors corrected." | tee -a $LOGFILE $FULLLOGFILE
   
#<a id='libbuild'>Building the package</a>
#-----------------------------------------

#Now, we can finally build the package. _debuild_ does pretty much all the work.
#-us and -uc options means that we don't sign the packages.

echo "Building debian packages..." | tee -a $LOGFILE $FULLLOGFILE
echo "debuild -us -uc" >> $FULLLOGFILE
debuild -us -uc >> $FULLLOGFILE
if [ $? -ne 0 ]; then
    echo "Package building failed." | tee -a $LOGFILE $FULLLOGFILE
    exit 6
fi
echo "Debian packages successfully built." | tee -a $LOGFILE $FULLLOGFILE

#We now have to remove the debian directory, the tarballs, and some files
#created by _debuild_.

if [ $leaveunclean -eq 0 ]
then
    echo "Cleaning directory..." | tee -a $LOGFILE $FULLLOGFILE
    echo "rm -rf debian/ && cd .." >> $FULLLOGFILE
    rm -rf debian/ && cd ..
    echo "rm -f $TARBALL"  >> $FULLLOGFILE
    rm -f "$TARBALL"
    echo "rm -f $LIBPACKAGENAME""_$VERSION.debian.tar.gz" >> $FULLLOGFILE
    rm -f "$LIBPACKAGENAME""_$VERSION.debian.tar.gz"
    echo "rm -f $BINPACKAGENAME""_$VERSION.debian.tar.gz" >> $FULLLOGFILE
    rm -f "$BINPACKAGENAME""_$VERSION.debian.tar.gz"
    echo "rm -f $INDPACKAGENAME""_$VERSION.debian.tar.gz" >> $FULLLOGFILE
    rm -f "$INDPACKAGENAME""_$VERSION.debian.tar.gz"
    echo "rm -f *.build *.changes" >> $FULLLOGFILE
    rm -f *.build *.changes
fi
    
#<a id='afterbuild'>Running After build operations</a>
#-------------------------------------------------------

#We execute commands specified in the configuration file in the field AFTERBUILD

cd $MAKEFILEDIR
IFS=';' read -a commands <<< "$AFTERBUILD"
for cmd in "${commands[@]}"
do
    echo $cmd | tee -a $LOGFILE $FULLLOGFILE
    eval "$cmd"
done

env echo -e "\nYou can now find your debian packages and logs in \
$LOGDIR. buildeb.log is the same as the previous output, and \
buildeb_full.log is a complete output of every program called by \
buildeb (compilation, package building operations, etc...)." \
    | tee -a $LOGFILE $FULLLOGFILE
