 
/****************************************************************************
*
*  Module name        : GuardParser.yacc
*  Version number     : 2.0
*  Created date       : Thu Jun  7 15:11:20 ETE 1990
*  Created by         : Bonnaire Xavier
*
*  Subject            : Regles de grammaire pour l'Analyseur/Coprocesseur du
*                       langage de declaration de reseaux de Petri (Guardes uniquement).
*                       La grammaire doit etre de type LALR(1).
*
*  Major Revision for libPetri : Yann Thierry-Mieg , 09/2002
*  Revision for FrameKit Environment : Alioune DIAGNE
*  Revision Date : April, 15th, 1996
*
****************************************************************************/



%{

#define YYDEBUG 0
#define _PARSER_SANDRINE_YACC_
#define _MARS_TYPE_COMPATIBLE_
#define PRINTF_ALLOWED 1

#include <list>
#include <string>
#include <vector>

#include "PNet.h"
#include "PNetIO.h"
#include "Guard.h"
#include "PNClass.h"
#include <cstdio>
using namespace std;

extern int guarderror(const char*)	;
extern int guardparse();
extern int unput_car();

/* Les variables globales */

//extern FILE *yyin;

//extern PNet  *PN;
//extern Guard* result_guard;	/* utilise pour mettre le resultat de l'analyse */
extern char yytext[];
extern int guardlex(void);
extern int guarderror (const char*);


using namespace ParserWrapper;
%}


/*------------------------------ Definition des TOKENS -----------------------------*/

%token <entier> IN INC DEC 
%token <entier>  NOT AND OR 
%token <entier> VIRG CRO_O CRO_F PAR_O PAR_F 
%token <entier> ACC_O ACC_F
%token <entier> EGAL INF SUP INF_E SUP_E N_EGAL T_TRUE T_FALSE

%token <chaine> IDENT NBR_SS  


/*------------------------------ Definition des types de retour des regles --------------------*/

%name-prefix "guard"

%type <guard> Predic 
%type <guard> Predicat

%type <chaine> Valeur

%type <entier> OpRel
%type <variable> Variable

%type <elements> ExplicitDomain SuiteExplicitDomain 
%type <pnclass> NomClasse

%left NOT OR AND


%union {
  char	*chaine;
  int	entier;
  class Guard * guard;
  class Variable *variable;
  class PNClass *pnclass;
  list<string> * elements;
}




/*--------- Definition de la derniere regle reduite dans la grammaire  ------------------------------*/

%start Predic

%%

Predic			: CRO_O Predicat CRO_F 
                            {   
			     // cerr << *$2 << endl ;
			      $2->ApplyNot();
			      result_guard = $2;
			      $$ = $2;  
			    }
			| CRO_O Predicat error { }
			| CRO_O error   {
			                   yyerror("Parse Error!  Fatal, Sorry ! \n");	
					}
			| Predicat { 
			             // cerr << *$1 << endl ;
				     result_guard = $1;
				     $1->ApplyNot();
			             $$ = $1;
				       /* Accept syntax without square brackets [guard] , i forget them all the time  */
				   }
                        ;			

Predicat		: T_TRUE
                              {  $$ = new Guard("TRUE");}
			| T_FALSE
                              { $$ = new Guard("FALSE");}
			| NOT Predicat 
				{ $$ = new Guard("NOT", $2); }
			| PAR_O Predicat PAR_F
				{ $$ = $2; }
			| Predicat AND Predicat
				{  
				  $$ = new Guard( "AND", $1, $3  ); 
				} 
			| Predicat OR Predicat 
                                { $$ = new Guard( "OR", $1, $3  );}
			| Variable EGAL Valeur 
				{ 
			          Guard * gRet ;
				  
				  Element * pe = $1->PClass()->Find($3);
				  // cerr << "found a Valeur  :" << *pe << endl ;	
				  
				  if (!pe) {
				    Variable *v = PN->LVar.FindName($3);
				    if (!v) { cerr << "Error parsing expression; Comparing variable "<< *$1<<" to unknown "<<$3 <<endl ; yyerror("Parse Error!  Fatal, Sorry ! \n");}
				    // cerr << "found a Variable :" << *v << endl ;
 				    gRet  = (*$1<*v)?new Guard ($1,"=",v):new Guard (v,"=",$1);
				  }
				  else  gRet  = new Guard ($1,pe);
				  
				  // cerr << " Read  :"<< *gRet << endl;
				  $$ = gRet;
			   	}
			| Variable N_EGAL Valeur 
				{ 
			          Guard * gRet ;
				  
				  Element * pe = $1->PClass()->Find($3);
				  // cerr << "found a Valeur  :" << *pe << endl ;	
				  
				  if (!pe) {
				    Variable *v = PN->LVar.FindName($3);
				    if (!v) { cerr << "Error parsing expression; Comparing variable "<< *$1<<" to unknown "<<$3 <<endl ; yyerror("Parse Error!  Fatal, Sorry ! \n");}
				    // cerr << "found a Variable :" << *v << endl ;
				    gRet  = (*$1<*v)?new Guard("NOT",new Guard ($1,"=",v)):new Guard("NOT",new Guard (v,"=",$1));
				  }
				  else  gRet  = new Guard ("NOT",new Guard ($1,pe));
				  
				  // cerr << " Read  :"<< *gRet << endl;
				  $$ = gRet;
			   	}
			| Variable OpRel Valeur 
				{ 
			          Guard * gRet ;
				  
				  Element * pe = $1->PClass()->Find($3);
				  // cerr << "found a Valeur  :" << *pe << endl ;	
				  
				  if (!pe) {
				    Variable *v = PN->LVar.FindName($3);
				    if (!v) { cerr << "Error parsing expression; Comparing variable "<< *$1<<" to unknown "<<$3 <<endl ; yyerror("Parse Error!  Fatal, Sorry ! \n");}
				    // cerr << "found a Variable :" << *v << endl ;
				    vector<Element>  elts = $1->PClass()->Elts();
				    
				    Variable * v1, * v2;
				    Guard *gtmp;
				    unsigned int classSize = elts.size();
				    unsigned int i;
				    list<Element>  list1 , list2 ; 


				    if ( $1->PClass() != v->PClass() ) { 
				      cerr << "Error parsing expression; Comparing variable "<< *$1<<" to variable "<<*v <<". Classes of compared variables do not match!"<< endl ;
				       yyerror("Parse Error!  Fatal, Sorry ! \n"); }
				    if ( $2 == INF || $2 == INF_E  ) {
				      v1 = $1;
				      v2 = v;
				    } else { /* > SUP or SUP_E >= */
				      v1 = v;
				      v2 = $1;
				    }
				    /* treat extreme cases */
				    if (classSize < 2) {
				      gRet = new Guard ("FALSE");
				    } else {
				      // cerr << "Comparison between "<< *v1 <<"and" << *v2<<endl;
				      

				      /* initialize recursion */
				      /* consider v1 < v2 */
				      
				      // copy ( elts.begin() , elts.end() , ostream_iterator<Element>(cerr, ","));cerr <<endl ;
					 
				      for (i=0;i< elts.size();i++) 
					list1.push_back(elts[i]);

				      // cerr <<"copy ok" << endl ;
				      
				      /* list1 = { e_1 .. e_n-1} and list2 = { e_n } */
				      {
					list2.push_front(list1.back());
					list1.pop_back();
					vector <Element> vect1 (list1.begin(), list1.end()), 
					                 vect2 (list2.begin(), list2.end()) ;
					gRet = new Guard("AND",new Guard(v1,vect1),new Guard(v2,vect2));
		//			cerr << "gRet =" << *gRet <<endl;
				      }

				     // for ( i=1 ; i <  classSize-1 ; i++  ) 
					while (1){
					list2.push_front(list1.back());
					list1.pop_back();
					if (list1.size() == 0) break;
					vector <Element> vect1 (list1.begin(), list1.end()), vect2(list2.begin(),++list2.begin()) ;
					
					gtmp = new Guard("AND",new Guard(v1,vect1),new Guard(v2,vect2));
					gRet = new Guard("OR",gtmp,gRet);
			//		cerr << "gRet =" << *gRet <<endl;
				      }
				    
				    } // comparing variables 
				    if ( $2 == SUP_E || $2 == INF_E ) {
				      gRet = new Guard("OR",new Guard(v1,"=",v2),gRet);
				    }
				  }
				  else  { /* comparison X < val */
				    vector<Element> tmp;
				   
				    string opstr = ($2 == SUP_E)?">=":
						( ($2 == INF_E)?"<=":
						( ($2 == INF)?"<":
                                                ( ($2 == SUP)?">":"" ) ) );
				 //   cerr << "SUP_E, $2 : " << SUP_E <<","<< $2 << endl;
				    tmp =  $1->PClass()->getRange(opstr,pe) ;
				    
				    gRet  = new Guard ($1,tmp);
				   				    
				  }
				//  cerr << " Read  :"<< *gRet << endl;
				  $$ = gRet;
			   	}
                        | Variable IN NomClasse 
                                {
				  Guard * gRet  = new Guard ($1 , $3->Elts()) ; 
				  $$ = gRet;
				}
                        | Variable IN ExplicitDomain
				{
				  Element * pe;
				  vector<Element> ve($3->size());
				  list<string>::iterator it;
				  unsigned int i;
				  // copy($3->begin(), $3->end(), ostream_iterator<string>(cerr, ","));cerr <<endl ;

				  for ( it = $3->begin(), i=0; i < $3->size() ; it++, i++) {
				    pe = $1->PClass()->Find(*it);
				    if (pe) { ve[i] = *pe ; }
				    else { cerr << "Element "<< *it << " is not a member of class" <<  *($1->PClass()) << endl ;  yyerror("Parse Error!  Fatal, Sorry ! \n"); }
				  } 
				   // copy(ve.begin(), ve.end(), ostream_iterator<Element>(cerr, ","));
				  Guard * gRet  = new Guard ($1 , ve) ; 
				  /* Destroy intermediate list */
				  delete $3 ;
				  //  cerr << " Read  :"<< *gRet << endl;
				  $$ = gRet;
				}
			| NOT error {  yyerror("Parse Error!  Fatal, Sorry ! \n");} 
			| Predicat AND error {  yyerror("Parse Error!  Fatal, Sorry ! \n");} 
			| Predicat OR error { yyerror("Parse Error!  Fatal, Sorry ! \n");} 
			| IDENT error {  yyerror("Parse Error!  Fatal, Sorry ! \n");} 
			;

Variable		: IDENT 
				{ Variable *v = PN->LVar.FindName($1);
       			 	  if (!v) { string s =" Unknown variable named:";
				                   s+= $1;
				    yyerror(s.c_str()); }
				  // cerr << "found a Variable :" << *v << endl ;
				  $$ = v ;
				}
			;

NomClasse               : IDENT
				{ PNClass *v = PN->LClasse.FindName($1);
       			 	  if (!v) { string s =" Unknown Color domain named:";
				                   s+= $1;
				    yyerror(s.c_str()); }
				  // cerr << "found a PNClass :" << *v << endl ;
				  $$ = v ;
				}
			;
                              

Valeur 			: IDENT { $$ = $1; }
			| NBR_SS { $$ = $1; }
			;

ExplicitDomain		: ACC_O IDENT SuiteExplicitDomain ACC_F 
			{
			 $3->push_front($2);
			 $$ = $3 ;
			}
			;


SuiteExplicitDomain	: /* empty */ { 
					list<string> * pL = new list<string> ;
				        $$ = pL ;
				       }
			| VIRG IDENT SuiteExplicitDomain 
				{
				  $3->push_front(string($2));
				  $$ = $3 ;
				}
			;


OpRel			: INF 	{ $$ = INF; }
			| SUP 	{ $$ = SUP; }
			| INF_E { $$ = INF_E; }
			| SUP_E { $$ = SUP_E; }
                        ;
			
%%


extern FILE * guardin;
int yyerror (const char *s) {

	cerr << "ouch !!! " << s << endl;
	cerr << "While parsing guard:" ;
	rewind(guardin);
	char line[1024];
	fgets(line,1024,guardin);
	cerr << line ;
	return 1;
}



